<?xml version="1.0" encoding="UTF-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <id>http://blog2.karottc.com/</id>
  <title>杂思未济</title>
  <updated>2017-05-25T12:26:17Z</updated>
  <link rel="alternate" href="http://blog2.karottc.com/"/>
  <link rel="self" href="http://blog2.karottc.com/atom.xml"/>
  <author>
    <name>karottc</name>
    <uri>http://blog2.karottc.com</uri>
  </author>
  <entry>
    <id>tag:blog2.karottc.com,2017-08-25:/posts/2017-08-25-play-king-of-glory-9-months/</id>
    <title type="html">我玩王者荣耀这九个月</title>
    <published>2017-08-25T12:26:17Z</published>
    <updated>2017-05-25T12:26:17Z</updated>
    <link rel="alternate" href="http://blog2.karottc.com/posts/2017-08-25-play-king-of-glory-9-months/"/>
    <content type="html">&lt;p&gt;从去年12月份（准确的时间是：2016.12.01）开始玩王者荣耀，到现在也差不多9个月了，从最开始的狂热，到现在淡漠。所以今天就来回顾一下，谈谈得失，梳理一下心路历程的变化。&lt;/p&gt;
&lt;figure&gt;
&lt;img src="/static/images/2017/20170825_game_01.JPG" alt="最高段位" /&gt;&lt;figcaption&gt;最高段位&lt;/figcaption&gt;
&lt;/figure&gt;
&lt;h2 id="入坑"&gt;入坑&lt;/h2&gt;
&lt;p&gt;都过去九个月了，已经不记得当时是由于什么原因开始玩这个游戏了，只记得在一个黄昏，下载了游戏，然后趁着吃晚饭的时间，过完了新手教程，然后买了两个英雄开始玩，当时前一周依然不不会玩（比如不知道应该走哪条线，不看小图等等），都是瞎玩，这种状态下每天都玩了好几局，现在回过头看，也没想通当时哪里来的动力玩这么多，因为完全是抓瞎状态，也体会不到游戏的乐趣才是。&lt;/p&gt;
&lt;p&gt;后面开始学习玩这个游戏的基本法，学习每个位置/英雄要走什么路线，应该是什么样的套路，看了很多攻略，看了很多直播，关注了很多人玩。逐渐的自己也上道了。&lt;/p&gt;
&lt;p&gt;这大概是4个月之后了，也就是前4个月，大概平均每天玩了10场，看到这个数字的时候，我自己也惊呆了，以场均20分钟来算，也是200分钟，也就是整整3个多小时，把我吓得眼泪都横着流了。&lt;/p&gt;
&lt;h2 id="挣扎"&gt;挣扎&lt;/h2&gt;
&lt;p&gt;本以为自己会玩之后就能很快的上到王者了，一段时间之后，发现自己还是太天真，这个游戏的设计就是让你的胜率在50%，无论你会不会玩，胜率都是在50%，除非你真的是1打九的大神，因为看很多主播和职业选手，单排也时常翻车。&lt;/p&gt;
&lt;p&gt;然而我当然不会就此认命，我依然在不停的看攻略-&amp;gt;实践-&amp;gt;排位-&amp;gt;看攻略这个循环中，依然相信，可以靠实力达到最高段位。这样又持续了三四个月，中间还横跨了一个赛季，而我的胜率始终在52%左右，输输赢赢，段位始终还是上不去。然后我放弃了，在某个深夜打了游戏，被队友弄得一肚子火气的时候，突然就放弃了。&lt;/p&gt;
&lt;p&gt;现在我依然相信自己进行上面那个循环可以达到最高段位，只是我现在并不愿意花这个时间了。回想自己当时玩这个游戏的初衷，只是为了社交，没料到自己却沉迷了，以为现在的技术水平（任何位置都能玩，有意识、有技术，虽然不是顶级，但是也够用了），应付社交足够了，既然目的已经达到，是时候退场换去干点别的了，比如年初的计划，到现在依然是一片空白。&lt;/p&gt;
&lt;h2 id="反思"&gt;反思&lt;/h2&gt;
&lt;p&gt;玩游戏这个几个月然我看到自己的意志力其实不值一提（以前还以为自己的意志力还可以），以前看到书上说意志力一样很耗体力，如果你在别的地方消耗了你的意志力，在另一个地方你的意志力会减弱，此言不虚啊。如果不是游戏的这种策略，反复的折腾你，还让你上不去段位，我估计还沉迷在游戏中，由于反复的被折腾，愤怒值达到顶点，然后放弃了这个所谓的全民游戏，还是应该好好感谢一下吧。&lt;/p&gt;
&lt;p&gt;这之后开始思考，这个游戏是什么原因让人沉迷和上瘾的，看了很多的分析，看了一本书《上瘾五百年》，还是没有找到让自己不上瘾的办法，真是那句——道理我都懂，就是做不到吧。&lt;/p&gt;
&lt;p&gt;不玩游戏之后，我发现时间多了起来，然后发现已经很久没有写过东西，那就从这篇开始，恢复状态吧。&lt;/p&gt;
&lt;h4 id="footnotes"&gt;Footnotes&lt;/h4&gt;
&lt;p&gt;题图就是我玩这个游戏达到的最高段位了。&lt;/p&gt;
</content>
  </entry>
  <entry>
    <id>tag:blog2.karottc.com,2016-11-26:/posts/2016-11-26-socket-read-function/</id>
    <title type="html">Linux网络中的read函数</title>
    <published>2016-11-26T12:26:17Z</published>
    <updated>2016-11-26T12:26:17Z</updated>
    <link rel="alternate" href="http://blog2.karottc.com/posts/2016-11-26-socket-read-function/"/>
    <content type="html">&lt;p&gt;这是一篇查漏补缺的文章，探究一下linux网络编程中read函数的几种返回值，以及分别在什么情况下发生的，当然也会顺带提及 &lt;em&gt;TCP&lt;/em&gt; 的一点点知识（毕竟谈到网络是离不开TCP的）。&lt;/p&gt;
&lt;p&gt;为了验证，写了一个 client 和 server 来测试相关的东西。&lt;/p&gt;
&lt;h2 id="tcp的三次握手和三次挥手"&gt;TCP的三次握手和三次挥手&lt;/h2&gt;
&lt;p&gt;是的，你没看错，是三次挥手，而不是四次。一般情况下，TCP在建立连接是需要三次握手，在断开连接时需要四次挥手，但是有时只需要三次挥手就够了，下图是我用tcpdump的抓包情况：&lt;/p&gt;
&lt;figure&gt;
&lt;img src="/static/images/2016/20161126_read_01.png" alt="tcp连接过程" /&gt;&lt;figcaption&gt;tcp连接过程&lt;/figcaption&gt;
&lt;/figure&gt;
&lt;p&gt;上图可以分为三个部分：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;建立连接，三次握手，红色部分；&lt;/li&gt;
&lt;li&gt;数据传输，蓝色部分；&lt;/li&gt;
&lt;li&gt;关闭连接，三次挥手，紫色部分。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;对应TCP的传输过程如下：&lt;/p&gt;
&lt;figure&gt;
&lt;img src="/static/images/2016/20161126_read_02.png" alt="tcp传输过程" /&gt;&lt;figcaption&gt;tcp传输过程&lt;/figcaption&gt;
&lt;/figure&gt;
&lt;p&gt;出现三次挥手的原因是因为，被动关闭连接的一端（本图中的 server 端）缓冲区内没有需要发送的数据，所以将ACK 和 FIN 合并发送给了 Client 端。如果 server 端收到 FIN 时缓冲区内还有未发送的数据，那么 server 端会先回 ACK，等到数据发送完成，再发送 FIN，这样就是通常我们看到的四次挥手了。&lt;/p&gt;
&lt;h2 id="阻塞模式下对-readwrite-的测试"&gt;阻塞模式下对 read/write 的测试&lt;/h2&gt;
&lt;h3 id="测试1"&gt;测试1&lt;/h3&gt;
&lt;p&gt;流程如下：&lt;/p&gt;
&lt;figure&gt;
&lt;img src="/static/images/2016/20161126_read_03.png" alt="测试1" /&gt;&lt;figcaption&gt;测试1&lt;/figcaption&gt;
&lt;/figure&gt;
&lt;p&gt;结果：&lt;/p&gt;
&lt;p&gt;当缓冲区还有未读取的数据时，调用 close 函数关闭 socket，会触发 TCP 发送 RST，此时对方等到数据接收，调用 read 函数，会得到 &lt;strong&gt;-1&lt;/strong&gt; 的返回值，&lt;strong&gt;errno&lt;/strong&gt; 被设置为104 (&lt;em&gt;Connection reset by peer&lt;/em&gt;)，如果在收到 RST 之后仍然继续调用 write 函数，会触发系统的 SIGPIPE 信号，导致程序退出（如果未处理该信号的话）。&lt;/p&gt;
&lt;figure&gt;
&lt;img src="/static/images/2016/20161126_read_04.png" alt="sigpipe信号" /&gt;&lt;figcaption&gt;sigpipe信号&lt;/figcaption&gt;
&lt;/figure&gt;
&lt;h3 id="测试2"&gt;测试2&lt;/h3&gt;
&lt;p&gt;流程如下：&lt;/p&gt;
&lt;figure&gt;
&lt;img src="/static/images/2016/20161126_read_05.png" alt="测试2" /&gt;&lt;figcaption&gt;测试2&lt;/figcaption&gt;
&lt;/figure&gt;
&lt;p&gt;结果：&lt;/p&gt;
&lt;p&gt;当对方已经关闭连接时（即对方发送了 FIN），此时再调用 write 写数据，会触发对方发送一个 RST，如果忽略 SIGPIPE 信号，继续 write 数据，得到的返回值是 &lt;strong&gt;-1&lt;/strong&gt;，&lt;strong&gt;errno&lt;/strong&gt;被设置为32(&lt;em&gt;Broken pipe&lt;/em&gt;)。&lt;/p&gt;
&lt;h3 id="测试3"&gt;测试3&lt;/h3&gt;
&lt;p&gt;流程如下：&lt;/p&gt;
&lt;figure&gt;
&lt;img src="/static/images/2016/20161126_read_06.png" alt="测试3" /&gt;&lt;figcaption&gt;测试3&lt;/figcaption&gt;
&lt;/figure&gt;
&lt;p&gt;结果：&lt;/p&gt;
&lt;p&gt;调用 &lt;em&gt;setsockopt&lt;/em&gt; 给read设置一个超时时间(&lt;code&gt;setsockopt(sockfd, SOL_SOCKET,SO_RCVTIMEO, &amp;amp;ti, sizeof(ti));&lt;/code&gt; )，超时之后，read函数返回&lt;strong&gt;-1&lt;/strong&gt;，&lt;strong&gt;errno&lt;/strong&gt;被设置为11(&lt;em&gt;Resource temporarily unavailable&lt;/em&gt;)。&lt;/p&gt;
&lt;h2 id="非阻塞模式下对read的测试"&gt;非阻塞模式下对read的测试&lt;/h2&gt;
&lt;p&gt;使用 &lt;em&gt;fcntl&lt;/em&gt; 设置socket为非阻塞模式，调用 read 的结果是会立刻返回 &lt;strong&gt;-1&lt;/strong&gt;，然后&lt;strong&gt;errno&lt;/strong&gt;被设置为了11。&lt;/p&gt;
&lt;h2 id="结论"&gt;结论&lt;/h2&gt;
&lt;p&gt;&lt;strong&gt;read&lt;/strong&gt; 函数返回值：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;大于0：成功读取的数据长度（Byte）；&lt;/li&gt;
&lt;li&gt;等于0：该 socket 已经关闭；&lt;/li&gt;
&lt;li&gt;等于-1：异常发生，包括但不限于以下几种：&lt;/li&gt;
&lt;li&gt;超时,errno=11；&lt;/li&gt;
&lt;li&gt;连接异常关闭（RST）,errno=104；&lt;/li&gt;
&lt;li&gt;主动关闭socket后再去 read,errno=9；&lt;/li&gt;
&lt;li&gt;非阻塞模式下的没有数据时，errno=11。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;strong&gt;write&lt;/strong&gt; 函数返回值：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;大于0：成功写入的数据长度（Byte）；&lt;/li&gt;
&lt;li&gt;等于0：写入长度为0；&lt;/li&gt;
&lt;li&gt;小于0：异常发生，包括但不限于以下几种：&lt;/li&gt;
&lt;li&gt;主动关闭再写数据,errno=9；&lt;/li&gt;
&lt;li&gt;连接异常关闭（RST）之后再写数据,errno=32。&lt;/li&gt;
&lt;/ul&gt;
</content>
  </entry>
  <entry>
    <id>tag:blog2.karottc.com,2016-11-19:/posts/2016-11-19-tcp/</id>
    <title type="html">一张图了解TCP</title>
    <published>2016-11-19T12:26:17Z</published>
    <updated>2016-11-19T12:26:17Z</updated>
    <link rel="alternate" href="http://blog2.karottc.com/posts/2016-11-19-tcp/"/>
    <content type="html">&lt;p&gt;从下面一张图了解TCP：&lt;/p&gt;
&lt;figure&gt;
&lt;img src="/images/2016/TCP.svg" alt="TCP" /&gt;&lt;figcaption&gt;TCP&lt;/figcaption&gt;
&lt;/figure&gt;
</content>
  </entry>
  <entry>
    <id>tag:blog2.karottc.com,2016-11-05:/posts/2016-11-05-data-mining-and-its-application/</id>
    <title type="html">据挖掘及其应用 —— 杨强讲座</title>
    <published>2016-11-05T12:26:17Z</published>
    <updated>2016-11-05T12:26:17Z</updated>
    <link rel="alternate" href="http://blog2.karottc.com/posts/2016-11-05-data-mining-and-its-application/"/>
    <content type="html">&lt;figure&gt;
&lt;img src="/static/images/2016/yangqiang.jpg" alt="杨强教授简介" /&gt;&lt;figcaption&gt;杨强教授简介&lt;/figcaption&gt;
&lt;/figure&gt;
&lt;p&gt;今天（2016.11.04）公司请了 &lt;strong&gt;&lt;a href="https://zh.wikipedia.org/wiki/%E6%9D%A8%E5%BC%BA"&gt;杨强教授&lt;/a&gt;&lt;/strong&gt; 来分享数据挖掘及其应用相关的东西，下面记录一下整个内容。&lt;/p&gt;
&lt;h2 id="引子"&gt;引子&lt;/h2&gt;
&lt;p&gt;首先 &lt;a href="http://baike.baidu.com/item/%E6%9B%BE%E5%AE%87/12003748"&gt;曾宇&lt;/a&gt; 上去为杨强讲授的讲话做了铺垫，观点如下：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;应该拥抱变化，顺应技术趋势的发展；&lt;/li&gt;
&lt;li&gt;了解这些技术能做什么、不能做什么；&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;所以请了杨教授来分享一些心得，和解答大家的疑惑。&lt;/p&gt;
&lt;h2 id="分享内容"&gt;分享内容&lt;/h2&gt;
&lt;p&gt;今天跟大家的分享的内容是数据挖掘及其应用，数据挖掘和现在讲的人工智能还是有些区别的，区别是什么，下面会讲到。&lt;/p&gt;
&lt;h3 id="案例分享"&gt;案例分享&lt;/h3&gt;
&lt;h4 id="百合网"&gt;百合网&lt;/h4&gt;
&lt;p&gt;一张图，两个人聊天的时候从哪儿（一个地方）到哪儿（另一个地方的）图形。&lt;/p&gt;
&lt;p&gt;什么是数据挖掘：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;总结过去；&lt;/li&gt;
&lt;li&gt;预测未来；&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;数据挖掘首先是根据已有数据进行总结，然后还可以建立模型预测未来，预测未来更多的是人工智能做的事。比如根据百合网这个可以问的问题是：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;都是哪些人在网上找对象；&lt;/li&gt;
&lt;li&gt;他们的教育水平如何；&lt;/li&gt;
&lt;li&gt;男女比例如何；&lt;/li&gt;
&lt;li&gt;交谈的时间（比如男生很快就会对一个女生不感兴趣，然后转变一个聊天的对象）；&lt;/li&gt;
&lt;li&gt;钱有多重要（对男生来说，对方的工资水平没有多重要，女生对对方的要求一直是上升趋势）；&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;数据挖掘是离不开人的，要成为数据挖掘的专家，首先一点是离不开直觉，这个直觉是找到&lt;strong&gt;特征&lt;/strong&gt;的直觉。所以特征工程和特征工程师是数据挖掘的未来，是数据挖掘必不可少的一部分。但是对于百合网这样的网站，特征工程并不那么重要，原因是大家关注的特征就那么很少的几个。&lt;/p&gt;
&lt;h4 id="coursera教学数据"&gt;Coursera教学数据&lt;/h4&gt;
&lt;p&gt;香港科技大学在coursera的教学数据，通过对视频的观看数据，可以找到：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;来分析比较作业A和B，哪个更难，比如，大部分学生反复的回看，说明这里比较难和重要，当然也有可能是期末考试和期中考试。&lt;/li&gt;
&lt;li&gt;可以观察不同地域学生的学习方式的差异，比如，美国学生喜欢从一个概念出发，然后在视频中找到那个概念看，（比较有跳跃性），而中国学生，往往是从头看到尾。&lt;/li&gt;
&lt;li&gt;爱讨论的学生是不是成绩也比较好。&lt;/li&gt;
&lt;li&gt;好学生和差学生的社交网络图。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;这两个例子，第一个百合网的例子是所有的行为都在网上进行——即足迹电子化，第二个也有这个特点，因为是在网上教学。但是我们身边的工作和生活并不是这样，我们所有的行为，大部分数据都没有电子化，都丢失了。&lt;/p&gt;
&lt;p&gt;所以数据挖掘第一步是找到这些数据，把各种不同的数据整合起来，使不同的数据之间有关系。第二个是特征工程。第三个是样本缺乏，要做预测就需要高质量的样本。&lt;/p&gt;
&lt;h4 id="推荐系统"&gt;推荐系统&lt;/h4&gt;
&lt;p&gt;人工智能的语音、图像的成功，在这两个成功之前的成功就是推荐系统，比如淘宝、亚马逊。推荐系统的数据可以用一个图模型来表示，一个点表示一个产品或者用户。补齐矩阵中缺失的值。�&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;数据整合很重要；&lt;/li&gt;
&lt;li&gt;特征工程是关键；&lt;/li&gt;
&lt;li&gt;样本缺乏是一个很头疼的问题；&lt;/li&gt;
&lt;li&gt;训练数据和测试数据可能有很大不同。&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id="移动领域-学术界的工作"&gt;移动领域-学术界的工作&lt;/h3&gt;
&lt;p&gt;以诺基亚做的实验开始，现在通过一个手机，基本可以知道一个人的性别、收入等等很多数据。&lt;/p&gt;
&lt;p&gt;另一个实验，收集couple 在房间生活的所有数据，然后用了一个模型迁移，来判断当一个人在某一个区域的时候，就能知道他在做什么。&lt;/p&gt;
&lt;p&gt;在移动领域，数据来源两个：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;随身携带的设备；&lt;/li&gt;
&lt;li&gt;网络上，知识图谱，网络关系等；&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;由于样本缺乏，所以迁移模型就很可贵。&lt;/p&gt;
&lt;h3 id="舆情分析"&gt;舆情分析&lt;/h3&gt;
&lt;p&gt;舆情分析是一个有监督学习的特例。每个领域舆情的词有一定关联。迁移学习，整合数据，把一个领域的模型迁移到另一个领域。把虚拟世界和物理世界联系起来。&lt;/p&gt;
&lt;p&gt;例子一：对人人网的垃圾用户建模：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;用户的周边人；&lt;/li&gt;
&lt;li&gt;标注用户正常、异常；&lt;/li&gt;
&lt;li&gt;用户行为，比如晚上发邮件，发给陌生人；&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;例子2：伯克利大学基于深度学习的迁移学习，在一个图片领域，要学一个比较好的图片的话，需要上千万的图片，很长的时间才能做到，但是，如果学习任务变了，又不希望用那么多图片来重新训练，怎么办呢，可以把其中一些影视层固定住，把一些高层的东西来重新学习，这样发现这个办法是非常好的，这两者有一个自然的结合。&lt;/p&gt;
&lt;h3 id="对话系统"&gt;对话系统&lt;/h3&gt;
&lt;p&gt;研究拿一些真实的用户对话数据来训练对话系统，这个系统重要特点是以完成一个任务为主的，比如他最后要下一个订单：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;自动对话功能，回答比较靠谱；—— 深度学习&lt;/li&gt;
&lt;li&gt;真能完成一个任务，每次回答都能知道现在到哪儿了，距离目的还有多远；——强化学习&lt;/li&gt;
&lt;li&gt;可以个性化，每个人的回答不一样，知道一些喜好，跳过一些繁琐的问答。——迁移学习&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;这三个一起是强化迁移学习，公司的订餐系统。这个模型是一个通用性的模型，把这个框架用在阅读上，让机器读完一本书，然后来问一下特定的场景和段落，比如XXX的情人是谁，XXX和XXX有过什么交流。&lt;/p&gt;
&lt;p&gt;以上就是全部分享内容。&lt;/p&gt;
&lt;h2 id="其他"&gt;其他&lt;/h2&gt;
&lt;p&gt;目前人工智能的成功，还需要在一个特定的场景。&lt;/p&gt;
</content>
  </entry>
  <entry>
    <id>tag:blog2.karottc.com,2015-07-29:/posts/2015-07-29-cpp-reference/</id>
    <title type="html">C++的引用类型的变量到底占不占用内存空间？</title>
    <published>2015-07-29T12:26:17Z</published>
    <updated>2015-07-29T12:26:17Z</updated>
    <link rel="alternate" href="http://blog2.karottc.com/posts/2015-07-29-cpp-reference/"/>
    <content type="html">&lt;p&gt;分析一下 &lt;strong&gt;C++&lt;/strong&gt; 里面的引用类型（例如：&lt;code&gt;int &amp;amp;r = a;&lt;/code&gt; ）中的 &lt;code&gt;r&lt;/code&gt; 变量是否占用内存空间呢？是否和 &lt;code&gt;int *p = &amp;amp;a;&lt;/code&gt; 中的 &lt;code&gt;p&lt;/code&gt; 变量一样占用内存空间呢？&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;本文将给出答案。&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;直接看一个简单的例子：&lt;br /&gt;&lt;/p&gt;
&lt;div class="sourceCode"&gt;&lt;pre class="sourceCode cpp"&gt;&lt;code class="sourceCode cpp"&gt;&lt;span class="pp"&gt;#include &lt;/span&gt;&lt;span class="im"&gt;&amp;lt;iostream&amp;gt;&lt;/span&gt;

&lt;span class="kw"&gt;using&lt;/span&gt; &lt;span class="kw"&gt;namespace&lt;/span&gt; std;

&lt;span class="dt"&gt;int&lt;/span&gt; main(&lt;span class="dt"&gt;void&lt;/span&gt;)
{
    &lt;span class="dt"&gt;int&lt;/span&gt; a = &lt;span class="dv"&gt;6&lt;/span&gt;;
    &lt;span class="dt"&gt;int&lt;/span&gt; &amp;amp;r = a;
    &lt;span class="dt"&gt;int&lt;/span&gt; *p = &amp;amp;a;
    &lt;span class="dt"&gt;int&lt;/span&gt; x = r;
    &lt;span class="cf"&gt;return&lt;/span&gt; &lt;span class="dv"&gt;0&lt;/span&gt;;
}&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;接着我们通过 &lt;code&gt;g++ testref.cpp -o testref -g&lt;/code&gt; 来编译之后，用gdb来加载它，看看 &lt;code&gt;a&lt;/code&gt;, &lt;code&gt;r&lt;/code&gt;, &lt;code&gt;p&lt;/code&gt;, &lt;code&gt;x&lt;/code&gt; 的地址分别是多少:&lt;br /&gt; &lt;img src="/static/images/201501/20150729-01-gdb.png" alt="gdb" /&gt; 上图中 &lt;code&gt;a&lt;/code&gt; 的地址为 &lt;code&gt;0x7fffffffe208&lt;/code&gt;，用取地址符去获取 &lt;code&gt;r&lt;/code&gt; 地址，值和 &lt;code&gt;a&lt;/code&gt; 是一样的，其实，用 &lt;code&gt;&amp;amp;&lt;/code&gt; 符号是不能获取到引用类型变量的地址的，因为引用类型的变量本身只是另一个对象的别名，用可感知的方式描述，就是它仅仅是一个名字而已，对它的任何操作都是相当于对另一个对象的操作，所以这个取地址操作也是一样。&lt;/p&gt;
&lt;p&gt;但是，我们接着往下看，&lt;code&gt;p&lt;/code&gt; 的地址是 &lt;code&gt;0x7fffffffe218&lt;/code&gt;，和 &lt;code&gt;a&lt;/code&gt; 的地址刚刚相差了 &lt;strong&gt;16&lt;/strong&gt; 字节，接着看 &lt;code&gt;x&lt;/code&gt; 的地址是 &lt;code&gt;0x7fffffffe20c&lt;/code&gt;，这个地址正好是 &lt;code&gt;a&lt;/code&gt;的地址 &lt;code&gt;0x7fffffffe208 + 4&lt;/code&gt;, 而 &lt;code&gt;a&lt;/code&gt; 是 &lt;code&gt;int&lt;/code&gt; 型，变量本身占用 4 字节，正常情况下， &lt;code&gt;x&lt;/code&gt; 的地址应该是 &lt;code&gt;p&lt;/code&gt; 的地址 &lt;code&gt;0x7fffffffe218 + 8&lt;/code&gt;，这里 &lt;code&gt;+8&lt;/code&gt; 是因为我的机器是 64 位的机器，所以指针类型占用 8 字节。现在这种情况应该是编译器做了优化，把 &lt;code&gt;x&lt;/code&gt; 的放到了 &lt;code&gt;a&lt;/code&gt; 的后面，同样的，&lt;code&gt;x&lt;/code&gt; 的下一个变量的起始地址应该是 &lt;code&gt;0x7fffffffe20c + 4&lt;/code&gt; = &lt;code&gt;0x7fffffffe210&lt;/code&gt;，这个地址和 &lt;code&gt;p&lt;/code&gt; 之间刚好差了 8 个字节，也就是一个指针变量的地址，所以答案就很明显了。&lt;/p&gt;
&lt;p&gt;即，我们现在可以猜测，&lt;code&gt;r&lt;/code&gt; &lt;strong&gt;是占用内存空间，并且占用的大小和指针变量相同大小&lt;/strong&gt;。但是我们上面用gdb也看不了 &lt;code&gt;r&lt;/code&gt; 的实际地址，所以这也只能是猜测，只是看似合理的猜测而已。&lt;/p&gt;
&lt;p&gt;为了证明这个猜测，我们继续把可执行文件反汇编出来看看：&lt;code&gt;objdump -d testref&lt;/code&gt; 得到的结果如下：&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;00000000004006cd &amp;lt;main&amp;gt;:
  4006cd:   55                      push   %rbp
  4006ce:   48 89 e5                mov    %rsp,%rbp
  4006d1:   c7 45 e8 06 00 00 00    movl   $0x6,-0x18(%rbp)   # int a = 6; a的地址 0x18
  4006d8:   48 8d 45 e8             lea    -0x18(%rbp),%rax
  4006dc:   48 89 45 f0             mov    %rax,-0x10(%rbp)   # int &amp;amp;r = a; r的地址 0x10
  4006e0:   48 8d 45 e8             lea    -0x18(%rbp),%rax
  4006e4:   48 89 45 f8             mov    %rax,-0x8(%rbp)    # int *p = &amp;amp;a; p的地址 0x8
  4006e8:   48 8b 45 f0             mov    -0x10(%rbp),%rax  # 下面两行是为了后面的赋值做准备
  4006ec:   8b 00                   mov    (%rax),%eax
  4006ee:   89 45 ec                mov    %eax,-0x14(%rbp)   # int x = r;   x的地址 0x14
  4006f1:   b8 00 00 00 00          mov    $0x0,%eax
  4006f6:   5d                      pop    %rbp
  4006f7:   c3                      retq &lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;我把对应处，都写在上面的注释里了。&lt;/p&gt;
&lt;p&gt;所以，现在可以得到结论：&lt;font color='red'&gt;&lt;strong&gt;引用类型的变量会占用内存空间，占用的内存空间的大小和指针类型的大小是相同的。&lt;/strong&gt;&lt;/font&gt; 从上面的汇编代码可以看出，虽然引用是一个对象的别名，但是在汇编层面，和指针是一样的。&lt;/p&gt;
&lt;p&gt;2015.07.29&lt;/p&gt;
</content>
  </entry>
  <entry>
    <id>tag:blog2.karottc.com,2015-07-26:/posts/2015-07-26-zhihu-sarcasm/</id>
    <title type="html">抓取知乎每日吐槽</title>
    <published>2015-07-26T12:26:17Z</published>
    <updated>2015-07-26T12:26:17Z</updated>
    <link rel="alternate" href="http://blog2.karottc.com/posts/2015-07-26-zhihu-sarcasm/"/>
    <content type="html">&lt;p&gt;&lt;strong&gt;知乎日报&lt;/strong&gt; 里面有一节，叫做⎾如何正确的吐槽⏌，里面有很多很有意思而有短小的回答，基本上我我每天都会看一眼。所以我就写了脚本把他们全部抓了下来，放到自己的服务器上，同时每天还在定时去抓取当天新出来的数据，然后用 &lt;em&gt;swift&lt;/em&gt; 写了一个 app 来从自己的服务器获取数据来看。&lt;/p&gt;
&lt;p&gt;下面记录一下做这件事的过程。&lt;/p&gt;
&lt;h2 id="抓取数据"&gt;抓取数据&lt;/h2&gt;
&lt;p&gt;要抓取知乎的吐槽数据，第一步就是要知道它对应的 &lt;em&gt;URL&lt;/em&gt; ，这个获取方法也很简单，直接抓个包就能知道了，具体的形式大概如下这样：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;http://news-at.zhihu.com/api/4/section/2/before/xxxxxx&lt;/code&gt; , 这个是获取整个吐槽的标题列表的url；&lt;/li&gt;
&lt;li&gt;&lt;code&gt;http://news-at.zhihu.com/api/4/story/xxxxx&lt;/code&gt; ，这个是获取具体某一天的内容的url。&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id="创建数据库"&gt;创建数据库&lt;/h3&gt;
&lt;p&gt;这个数据量并不大，我建了两张表，一张存索引，一张存每天具体的内容。如下图：&lt;/p&gt;
&lt;figure&gt;
&lt;img src="/static/images/201501/20150726-zhihu-mysql.png" alt="Mysql表" /&gt;&lt;figcaption&gt;Mysql表&lt;/figcaption&gt;
&lt;/figure&gt;
&lt;h3 id="搭建服务器"&gt;搭建服务器&lt;/h3&gt;
&lt;p&gt;有了数据，下一步就是提供 &lt;em&gt;CGI&lt;/em&gt; 接口给外部调用获取数据，然后显示。&lt;/p&gt;
&lt;p&gt;然后，我用 &lt;em&gt;nginx&lt;/em&gt; + &lt;em&gt;django&lt;/em&gt; 搭了一个服务器，提供了三个接口，都是返回 &lt;em&gt;JSON&lt;/em&gt; 格式的数据，三个接口具体如下：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;http://104.128.85.9:8001/api/gethomelist&lt;/code&gt;：获取首屏的数据列表；&lt;/li&gt;
&lt;li&gt;&lt;code&gt;http://104.128.85.9:8001/api/getnextlist?timestamp=1434666598&lt;/code&gt;：下拉刷新的时候获取新增数据；&lt;/li&gt;
&lt;li&gt;&lt;code&gt;http://104.128.85.9:8001/api/getstorydetail?id=4827840&lt;/code&gt;：获取某一天具体的内容。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;可以看得出来，我这三个接口都是为了给 app 端调用而设计提供的，所以下一步就是完成一个 app 把这些内容显示出来。&lt;/p&gt;
&lt;h2 id="app-端显示"&gt;app 端显示&lt;/h2&gt;
&lt;p&gt;app 端的工作就是：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;通过网络请求获取数据；&lt;/li&gt;
&lt;li&gt;解析 &lt;em&gt;JSON&lt;/em&gt; 数据然后根据一定的排版显示。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;当然，我也是只实现了一个极其简陋的效果，直接放图好了： &lt;img src="/static/images/201501/20150726-zhihu-app1.png" alt="app图" /&gt;&lt;/p&gt;
&lt;figure&gt;
&lt;img src="/static/images/201501/20150726-zhihu-app2.png" alt="App效果图" /&gt;&lt;figcaption&gt;App效果图&lt;/figcaption&gt;
&lt;/figure&gt;
&lt;p&gt;上面两个图是历史列表和具体某一天内容的截图，下面再放一个应用图标的图： &lt;img src="/static/images/201501/20150726-zhihu-app3.png" /&gt; 上面有个图标乱入了，这个是我学习 &lt;em&gt;swift&lt;/em&gt; 的做的一个练习，具体可以看这篇：&lt;a href="http://www.karottc.com/blog/2015/07/25/swift-2048/"&gt;点我&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;整个过程大概就是这样。&lt;/p&gt;
&lt;h4 id="附件资料"&gt;附件资料&lt;/h4&gt;
&lt;p&gt;上面提到的服务和抓去知乎数据的代码在这里：&lt;a href="https://github.com/karottc/crawlzhihu"&gt;点我&lt;/a&gt;。&lt;/p&gt;
&lt;p&gt;app 源码在这里：&lt;a href="https://github.com/karottc/zhihudailyapp"&gt;点我&lt;/a&gt;。&lt;/p&gt;
&lt;p&gt;2015.07.26&lt;/p&gt;
</content>
  </entry>
  <entry>
    <id>tag:blog2.karottc.com,2015-07-25:/posts/2015-07-25-swift-2048/</id>
    <title type="html">用 Swift 语言实现 2048游戏</title>
    <published>2015-07-25T12:26:17Z</published>
    <updated>2015-07-25T12:26:17Z</updated>
    <link rel="alternate" href="http://blog2.karottc.com/posts/2015-07-25-swift-2048/"/>
    <content type="html">&lt;p&gt;前段时间粗浅的学习一下 �Swift 这个语言，一个多月前的苹果开发者大会上，Swift已经更新到了 &lt;strong&gt;SWift2.0&lt;/strong&gt; 了，相比1.0有了不少的变化，有些适配的 Swift1.0的库，现在已经不能直接拿来用了，需要稍微改一下，比如sqlite3.0，这个在下文中会讲到。本文主要记录一下用 �Swift 实现2048游戏这个过程。&lt;/p&gt;
&lt;h3 id="基本功能的设计"&gt;基本功能的设计&lt;/h3&gt;
&lt;p&gt;游戏在启动之后应该包括两个界面，1. 游戏的主界面；2. 游戏的设置界面，比如可以设置过关的分数，设置维度来控制难易度。&lt;/p&gt;
&lt;p&gt;这种两个屏用 &lt;em&gt;UINavigationController&lt;/em&gt; 就可以搞定，主界面主要是绘图和分数的展示，设置界面主要是通过 &lt;em&gt;Label&lt;/em&gt; 和 &lt;em&gt;Button&lt;/em&gt; 来展示设置和响应用户设置。&lt;/p&gt;
&lt;h3 id="游戏界面的实现"&gt;游戏界面的实现&lt;/h3&gt;
&lt;p&gt;这是主要的工作，分成几步来说明：&lt;/p&gt;
&lt;h4 id="游戏模型"&gt;游戏模型&lt;/h4&gt;
&lt;p&gt;游戏模型通过一个 &lt;strong&gt;4 x 4&lt;/strong&gt; 的二维矩阵来实现：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;要保存当前的各个位置的数字；&lt;/li&gt;
&lt;li&gt;控制新生成的数字；&lt;/li&gt;
&lt;li&gt;记录当前的最大值；&lt;/li&gt;
&lt;li&gt;判断当前是否每个位置上都有了数字；&lt;/li&gt;
&lt;li&gt;滑动时判断相邻两个是否可以合并，生成合并之后的数字。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;这个部分是整个游戏的核心，因为所有界面上展示的数据，都是来自于这个游戏模型的当前数值。&lt;/p&gt;
&lt;h4 id="初始界面"&gt;初始界面&lt;/h4&gt;
&lt;p&gt;第一步：绘制一个初始的界面，也就是 &lt;strong&gt;4 X 4&lt;/strong&gt; 的一个格子；&lt;/p&gt;
&lt;p&gt;第二步：初始数字的生成，用随机算法任意生成两个数字，同时控制数字 &lt;strong&gt;2&lt;/strong&gt; 出现的概率是90%，而数字 &lt;strong&gt;4&lt;/strong&gt; 出现的概率是 10%。&lt;/p&gt;
&lt;p&gt;第三步：合并相邻数字。&lt;/p&gt;
&lt;h4 id="游戏主体玩法"&gt;游戏主体玩法&lt;/h4&gt;
&lt;p&gt;第一步：添加新出现数字的动画；&lt;/p&gt;
&lt;p&gt;第二步：添加两个数字合并的动画；&lt;/p&gt;
&lt;p&gt;第三步：在主界面增加收拾识别，本游戏中只用支持上下左右四种手势即可；&lt;/p&gt;
&lt;p&gt;第四步：数字移动的算法，以向下滑动为例：当向下滑动的时候，从第一行依次向下移动一个位置（如果可以移动的话），同时移动了当前的位置的数字，上面位置的数字也有做相应的移动；&lt;/p&gt;
&lt;p&gt;第五步：相邻数字的合并，移动之后，判断相邻的数字，如果相等，就合并；&lt;/p&gt;
&lt;p&gt;第六步：合并之后，在剩余的位置上新生成一个数字，然后绘制图形。&lt;/p&gt;
&lt;h3 id="小细节适配"&gt;小细节适配&lt;/h3&gt;
&lt;p&gt;剩下要做的就是让游戏的设置生效，同时保存当前的游戏数据，在下一次启动的时候恢复。这里可以用sqlite保存，在github上有一个swift封装好的sqlite库，但是并能直接用到swift2.0上，所以，我做了小小的修改适配。&lt;/p&gt;
&lt;p&gt;最后，整个游戏的源码，在这里：&lt;a href="https://github.com/karottc/swift-practice/tree/master/game2048"&gt;点我&lt;/a&gt;。&lt;/p&gt;
&lt;p&gt;界面太丑了，所以我就不放游戏最后的截图了。等我什么时候心情好了再来美化一下界面。&lt;/p&gt;
&lt;p&gt;2015.07.25&lt;/p&gt;
</content>
  </entry>
  <entry>
    <id>tag:blog2.karottc.com,2015-06-19:/posts/2015-06-19-push-2M-messages/</id>
    <title type="html">给两百万用户推送消息</title>
    <published>2015-06-19T13:17:17Z</published>
    <updated>2015-06-19T13:17:17Z</updated>
    <link rel="alternate" href="http://blog2.karottc.com/posts/2015-06-19-push-2M-messages/"/>
    <content type="html">&lt;p&gt;我们新版app上线了，由于这次是一个大的改版，所以希望所有用户都升级到新版本，所以，一方面我们会在后台做一些限制来强制升级，另一方面我们也会推送介绍新版的消息给用户，也顺便提醒一些不活跃的用户。当然，做这些事都是要尽量保证用户体验，所以，对于那些已经升级到新版本的用户，就不应该再收到我们推送的消息了。&lt;/p&gt;
&lt;p&gt;因此，根据一些策略过滤之后，大概还有210万的用户需要推送消息，这么大的量没法手动操作，只能用程序来搞定了。很久以前我对这些数量其实并没有多大感知，但是最近接触的多了也就知道，数量大了之后就会有一些问题，比如服务的稳定性就需要考虑进去了，推送10个人可能一秒钟都不到，但是这百万量级，可能就需要几个小时了，这种推送时间太长肯定也是不能接受的。（比如昨天，我给一些用户补标，数量大概在500万左右，因为我考虑到不是很急，所以就只用了一个进程来跑，结果整整跑了24小时才结束，虽然是不急，但是这个时间也是太长了，还是自己的考虑欠缺，因为在运行之前并没有通过计算去预估它的时间）&lt;/p&gt;
&lt;p&gt;这次首先就考虑到了redis的读写压力，网络请求的速率等等情况，然后是准备在这边的调用方来限速，避免对后端的服务造成压力来保证服务的可靠，因为当时做这个后端服务接口的时候，主要就是给运营人员推送消息用的，而运营的消息，一天最多一条或者很多天才一条，因为消息多了会让用户反感。所以也就没考虑到会有这种场景，段时间内几百万的量，因此也就没有做压力测试，不知道上限在哪里，现在也就只能根据经验猜测，然后在调用端限制调用频率。不过，我先用了10个测试帐号，来具体看看，推送每个用户大概需要多少时间，然后发现每个用户的耗时在72~75毫秒的样子，这样1秒钟可以推送14个用户，1分钟可以到840～900个用户的样子，我用10个并发来进行，也就可以达到1分钟推送8400～9000个用户，所以200万的用户，大概需要220～240分钟，差不多4个小时。这个并发量对后端服务来说基本是可以的，虽然时间还是有点长，但也只能先这样了。&lt;/p&gt;
&lt;p&gt;同样的我先启动了2个进程，看看服务是否稳定，在看上去没有问题，各个监控也都正常，然后就放开了10个进程，当然，请求量自然一下就上来了，同样的先上图： &lt;img src="/static/images/201501/20150619-message1.png" alt="监控图" /&gt; 图中大概可以看到10个进程的请求量每分钟大概在11000～12000的样子，比上面预计的要快一些，同时也可以看到图里面，平时的请求量都只有几十的样子，现在突然升到1万以上，所以那些几十的曲线基本不可见了，那我把箭头处的曲线图放大来瞧瞧： &lt;img src="/static/images/201501/20150619-message2.png" alt="监控图" /&gt;&lt;/p&gt;
&lt;p&gt;数量上来之后，多少都会影响稳定性的，因为平时都是0错误的，而现在，出现了部分错误，不过错率在可接受的范围，最后的结果来看，200万的数量，错误数在200+个，大概是万分之1.2的错误率，并没有多大影响。总共耗时是3.5小时，不过我们的服务还是很有优化的空间的，正好最近也在慢慢的重构各个模块的代码（重构代码这种事真的需要自下而上的推动，同时也要老大同意），也算是很能增长经验值的了。&lt;/p&gt;
&lt;p&gt;2015.06.19 21:17&lt;/p&gt;
</content>
  </entry>
  <entry>
    <id>tag:blog2.karottc.com,2014-11-30:/posts/2014-11-30-prevent-douban-ad/</id>
    <title type="html">去除豆瓣广告</title>
    <published>2014-11-30T12:26:17Z</published>
    <updated>2014-11-30T12:26:17Z</updated>
    <link rel="alternate" href="http://blog2.karottc.com/posts/2014-11-30-prevent-douban-ad/"/>
    <content type="html">&lt;p&gt;偶然发现一个可以去除豆瓣广告的方法，下面先看豆瓣主页的两处广告：&lt;br /&gt; &lt;img src="/static/images/201406/20141130_douban1.png" alt="豆瓣广告" /&gt; &lt;img src="/static/images/201406/20141130_douban2.png" /&gt;&lt;/p&gt;
&lt;p&gt;把鼠标放在广告上的时候，浏览器下面就能看到链接的地址信息，同时，如果点看网页的源码，也可以更明显看到广告加载的信息，如下图&lt;br/&gt;&lt;/p&gt;
&lt;figure&gt;
&lt;img src="/static/images/201406/20141130_douban3.png" alt="豆瓣广告源码" /&gt;&lt;figcaption&gt;豆瓣广告源码&lt;/figcaption&gt;
&lt;/figure&gt;
&lt;p&gt;上面的图中都有一个 &lt;code&gt;http://erebor.douban.com/&lt;/code&gt; 的网址，所以去除广告的方法就很简单了，只要把 &lt;code&gt;erebor.douban.com&lt;/code&gt; 这个域名重定向到本地（即 &lt;code&gt;127.0.0.1&lt;/code&gt;）就搞定&lt;sup&gt;&lt;a href="#fn:1" name="fnref:1"&gt;1&lt;/a&gt;&lt;/sup&gt;。&lt;/p&gt;
&lt;p&gt;在hosts的文件中加入如下代码就OK:&lt;br/&gt; &lt;img src="/static/images/201406/20141130_douban4.png" alt="hosts文件" /&gt; 这个文件的在 &lt;em&gt;Mac OS X&lt;/em&gt; 系统的路径为：&lt;code&gt;/private/etc/hosts&lt;/code&gt;, windows系统也在etc目录下。&lt;/p&gt;
&lt;p&gt;2014.11.30 10:58&lt;/p&gt;
&lt;h4 id="footnotes"&gt;Footnotes:&lt;/h4&gt;
&lt;p&gt;&lt;sup&gt;&lt;a href="#fnref:1" name="fn:1"&gt;1&lt;/a&gt;&lt;/sup&gt; 从网页源码看来，豆瓣的前端不错，至少代码看起来挺整齐的，不像其他一些网站，那代码简直就不是人看的。&lt;/p&gt;
</content>
  </entry>
  <entry>
    <id>tag:blog2.karottc.com,2014-09-19:/posts/2014-09-19-two-world-edge/</id>
    <title type="html">【书摘】站在两个世界的边缘</title>
    <published>2014-09-19T12:26:17Z</published>
    <updated>2014-09-19T12:26:17Z</updated>
    <link rel="alternate" href="http://blog2.karottc.com/posts/2014-09-19-two-world-edge/"/>
    <content type="html">&lt;figure&gt;
&lt;img src="/static/images/201406/20140919_world_edge.png" alt="站在两个世界的边缘" /&gt;&lt;figcaption&gt;站在两个世界的边缘&lt;/figcaption&gt;
&lt;/figure&gt;
&lt;p&gt;本文是&lt;a href="http://book.douban.com/subject/25735727/"&gt;《站在两个世界的边缘》&lt;/a&gt;&lt;sup&gt;&lt;a href="#fn:1" name="fnref:1"&gt;1&lt;/a&gt;&lt;/sup&gt;的一些书摘： &amp;gt; 纵然你是一代天骄，坐拥天下，到头来不过化作一抔黄土； &amp;gt; &amp;gt; 纵然你是绝代佳人，艳冠群芳，到头来不过是一具白骨。 &amp;gt; &amp;gt; 但是，难道因为死亡是人生的终点，我们就要放弃生命的过程吗？ &amp;gt; &amp;gt; ——程浩&lt;/p&gt;
&lt;h3 id="写在阅读之前"&gt;写在阅读之前&lt;/h3&gt;
&lt;blockquote&gt;
&lt;p&gt;在其诸多散杂的文字中，有一份2013的年度计划清单：&lt;/p&gt;
&lt;p&gt;1、阅读10部关于西方哲学的著作&lt;/p&gt;
&lt;p&gt;2、阅读儒、墨、道、法等学派的主要著作&lt;/p&gt;
&lt;p&gt;3、阅读各类畅销书50部&lt;/p&gt;
&lt;p&gt;4、学习新概念英语全四册&lt;/p&gt;
&lt;p&gt;5、学习英语500小时（共1000小时）&lt;/p&gt;
&lt;p&gt;6、写下50份读书笔记+思维导图&lt;/p&gt;
&lt;p&gt;7、写下50部短篇小说&lt;/p&gt;
&lt;p&gt;8、写下一部长篇小说&lt;/p&gt;
&lt;p&gt;……&lt;/p&gt;
&lt;p&gt;他让我们感受到生命的力量。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h3 id="世界上最强的少年"&gt;世界上最强的少年&lt;/h3&gt;
&lt;blockquote&gt;
&lt;p&gt;有两种层面的活着，一种是单纯生命的延续，是再多一轮的心跳与呼吸，再多吃一口饭，多睡一觉，并且醒来；另一种层面的活着，是像一个活人一样活下去。&lt;/p&gt;
&lt;p&gt;这就是电影《1942》与小说《活着》的区别。前者只是要活下来，受尽凌辱也要活着。后者是不仅活着，还要笑着活下来——哪怕是苦笑，不仅活着，还不时要和命运开个粗鲁的玩笑。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h3 id="怀念程浩"&gt;怀念程浩&lt;/h3&gt;
&lt;blockquote&gt;
&lt;p&gt;在医院当他喊妈妈“我想回家”时，我就决定：既然我把他生下来，我就要把他养大。老天夺走他多少，我就用爱来弥补他多少。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h3 id="世间慨"&gt;世间慨&lt;/h3&gt;
&lt;blockquote&gt;
&lt;p&gt;活着，是每个人的希望；活得好，是每个人的欲望。这是每个活着的人（无论健康与否）都应该做到的。&lt;br /&gt;&lt;br /&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;hr /&gt;
&lt;blockquote&gt;
&lt;p&gt;只有吸满阳光的眼睛，才能照亮世界。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;hr /&gt;
&lt;blockquote&gt;
&lt;p&gt;记得有人说过：“世界上最难过的事情，莫过于多年以后，我们彼此发现对方都已经改变。”这真是一句漂亮的蠢话，最难过的事情从来都不是“彼此的改变”，而是所有人都在改变，只有你还一成不变.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;hr /&gt;
&lt;blockquote&gt;
&lt;p&gt;许多年以后我才明白，人生可以是一杯水，也可以是一片海，关键是看一个人的内心。心是大海，便能包容缺憾，同化污秽，永远保持自身的通透明净。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;hr /&gt;
&lt;blockquote&gt;
&lt;p&gt;这世界，不是每个人都有机会做自己想做的事情，但是我们应该尽量去做那些正确的事情。纵使不能抵挡黑夜的来临，我们也要站在星空下仰望光明。&lt;/p&gt;
&lt;p&gt;不必可怜谁，不必同情谁。所谓生活，不过就是一种“昂着头的艺术”，仅此而已。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;hr /&gt;
&lt;blockquote&gt;
&lt;p&gt;可能你永远也找不到一颗黄豆大小的珍珠，但是你知道——贝壳里面有珍珠，不是这一个就是下一个。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;hr /&gt;
&lt;blockquote&gt;
&lt;p&gt;但是，他的这段经历，却一直让我记忆犹新：一个男生，可以不帅，可以不念书，可以没钱，可以不善言谈，但是一定要对自己所钟爱的事业认真！否则，你的一生也就这样了。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;hr /&gt;
&lt;blockquote&gt;
&lt;p&gt;因为对人对事的认真程度，直接决定了你对其投入的时间、精力和感情的多与少；对工作的认真程度，决定了经济与物质；对感情（亲情、友情、爱情）的认真程度，决定了人际关系；对爱好的认真程度，决定了层次和趣味。还有很多类似的例子，不胜枚举。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;hr /&gt;
&lt;blockquote&gt;
&lt;p&gt;我就会发现自己所在的城堡，原来不过是一座囚禁思念的地牢。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;hr /&gt;
&lt;blockquote&gt;
&lt;p&gt;分离，既是落下的帷幕，亦是相遇时的序曲。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;hr /&gt;
&lt;blockquote&gt;
&lt;p&gt;其实我知道，自己不是一个爱读书的人，只是缺少一个不读的理由。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;hr /&gt;
&lt;blockquote&gt;
&lt;p&gt;站在时间的制高点审视过去的自己，我发现有时候人们之所以感到迷茫、痛苦和无助，很大程度上就是因为我们找不到一个合适的标尺来衡量自己的价值。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;hr /&gt;
&lt;blockquote&gt;
&lt;p&gt;人，就是这么一种动物：&lt;/p&gt;
&lt;p&gt;你喜欢过的东西，即使不要了，也不允许别人糟践。&lt;/p&gt;
&lt;p&gt;你喜欢过的人，即使分开了，也不允许别人对他不好。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;hr /&gt;
&lt;blockquote&gt;
&lt;p&gt;这不是我们对他们的爱，而是我们想象中的爱。这种想象中的爱，让我们以为自己很爱对方，自己所做的一切都是为了对方。可是结果呢？对方却一点都没有感受到，反而对你满是抱怨。换句话说，你的爱其实放了空枪。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;hr /&gt;
&lt;blockquote&gt;
&lt;p&gt;人们不会对你的缺陷念念不忘，人们只会在你最春风得意的时候，突然想起来：“哦？那家伙不是少两根手指吗？这也能办到，好厉害……”&lt;/p&gt;
&lt;p&gt;你失败一千次也不会有人记得你，因为人们只会记住你成功的一次。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;hr /&gt;
&lt;blockquote&gt;
&lt;p&gt;生命是平等的，财富是不平等的。医疗改革的目的就是让每一个社会公民，不管钱多钱少都能看得起病，有最基本的医疗保障，尽量抹平因财富带来的医疗资源分配不公的问题。如果用不平等的东西来购买平等，只会造成更大的不平等，产生更多的社会矛盾，使原本突出的贫富差距变得更加明显。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;hr /&gt;
&lt;blockquote&gt;
&lt;p&gt;要明白：墙，永远为大多数人而设；门，只会为少数人而开。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;hr /&gt;
&lt;blockquote&gt;
&lt;p&gt;当你的人生即将陷入黑暗，却有人甘愿陪你走向黑暗深处。什么人生啊、理想啊、爱情啊之类的，说到底不就是为了找到一个愿意陪你走向黑暗的人吗？&lt;/p&gt;
&lt;/blockquote&gt;
&lt;hr /&gt;
&lt;blockquote&gt;
&lt;p&gt;也许，人们的坚持，往往不是因为相信未来，而是他们不想背叛过去。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;hr /&gt;
&lt;blockquote&gt;
&lt;p&gt;也许我们无法明白“活着”的意义，但是我们已经为“活着”付出了太多代价；也许我们无法实现自己的梦想，但是我们已经为梦想流下了太多泪水。我们能做的，仅仅是在这条路上走得更远，绝不能回头。天堂未必在前方，但地狱一定在身后。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h3 id="知无涯"&gt;知无涯&lt;/h3&gt;
&lt;blockquote&gt;
&lt;p&gt;他们活在自我建构的“文明殿堂”里，时常自诩自己为“孤独的人”。而我恰恰认为，这些“文明殿堂中的孤独者”比那些热衷于成功学和心灵鸡汤的俗人更加无知。这类人往往自以为到达了无人知晓的广阔世界，其实不过是将自己关进了臆想出的精神牢笼，变成了一名“文化的囚徒”而已。&lt;/p&gt;
&lt;p&gt;说得直接点儿，到底是一种怎样的卑怯心理，才会想到要用区区几页书来装裱自己的人格？&lt;/p&gt;
&lt;/blockquote&gt;
&lt;hr /&gt;
&lt;blockquote&gt;
&lt;p&gt;说到底，你读书，不管是一千本还是一万本，那只是消费。而写作，哪怕只有一个字和一句话，那也是生产。生命是短暂的，要学会利用有限的时间，书写关于自己的历史。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;hr /&gt;
&lt;blockquote&gt;
&lt;p&gt;我常常想，一个人年轻的时候，就像一块干瘪的海绵，要想尽办法去吸收更多的水分，这么做就是为了有朝一日能够释放自身的能量。而一块不懂得释放的海绵，即使吸收再多的水分，也最多只是一个臃肿的水货而已。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;hr /&gt;
&lt;blockquote&gt;
&lt;p&gt;孤独有真伪之分。毫不客气地说，现代人的孤独都是装出来的。因为孤独的标准实在太高，一般人没资格孤独。人际交往上受点儿挫折就喊孤独，那是心理脆弱，与孤独无关。所以，任何人的孤独，如果未达到汉语词典所解释的程度，皆是伪孤独。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;hr /&gt;
&lt;blockquote&gt;
&lt;p&gt;你读过的书不仅没有化作强大的内心力量，甚至都无法替你解开人生困惑，唯一的功效就是多了几件演绎孤独的戏服。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;hr /&gt;
&lt;blockquote&gt;
&lt;p&gt;如果没有读书，我就不会对人生产生期待，那样就更容易获得满足；如果没有读书，我就不会了解世界是多么精彩，那样就不会向往独自远行；如果没有读书，我的心中就不会孕育出那些蓬勃跳动的梦想，那样就不会轻易感到失望；如果没有读书，我可能永远都不明白两个人的甜蜜，那样就不会尝出一个人的苦涩。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;hr /&gt;
&lt;blockquote&gt;
&lt;p&gt;其实，人们经常讨论哪本书更“高档”，不是因为他们真的喜欢那本书，而是因为他们幻想成为读过这本书的人。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;hr /&gt;
&lt;blockquote&gt;
&lt;p&gt;读书固然能给人带来改变，但是这改变尚不足以使人脱胎换骨。即便能带来某些改变，也需要付出漫长的时间和极大的毅力.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;hr /&gt;
&lt;blockquote&gt;
&lt;p&gt;不要以为看几本书就能让一个人起到脱胎换骨的功效，更不要以为读几本书就能让一个人变得有思想、有内涵，思想是顿悟，内涵是熏陶，这两样都不是从书上能学来的。要做好读一辈子书也只能当个愚人莽汉的心理准备。&lt;/p&gt;
&lt;p&gt;阅读永远是一场孤独的旅程，考验的是你有没有决心和耐心走到生命的尽头。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;hr /&gt;
&lt;blockquote&gt;
&lt;p&gt;但我觉得，如果一味地追求语言的通俗化，最后就会演变为语言的低俗化，最终丧失文学的美感，也将丧失我们阅读思辨文学的能力。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h3 id="尺素书"&gt;尺素书&lt;/h3&gt;
&lt;blockquote&gt;
&lt;p&gt;关于选择，我也曾经有过作出重要选择的经历。跟你不同的是，我并没有纠结很久，我只是问了自己三个问题：我想要什么？我还有什么？我能放弃什么？当我冷静地作出回答时，积压于心的迷茫和痛苦的雾霾，瞬间就烟消云散，一切都豁然开朗。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;hr /&gt;
&lt;blockquote&gt;
&lt;p&gt;关于选择，我也曾经有过作出重要选择的经历。跟你不同的是，我并没有纠结很久，我只是问了自己三个问题：我想要什么？我还有什么？我能放弃什么？当我冷静地作出回答时，积压于心的迷茫和痛苦的雾霾，瞬间就烟消云散，一切都豁然开朗。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;hr /&gt;
&lt;blockquote&gt;
&lt;p&gt;我庆幸自己没有像懦夫似的抱怨这个世界的不公，因为世界本身就是一个巨大的天平，左侧是公平，右侧是不公平，当上帝倾向于公平之时，这个世界就已经不公平了。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;hr /&gt;
&lt;blockquote&gt;
&lt;p&gt;我只需要明白，“选择承受苦难的人并不只有你”——这句话足矣。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;hr /&gt;
&lt;blockquote&gt;
&lt;p&gt;你曾在《大地之灯》中写道：“人是没有孤不孤独之分的，只有对孤独害怕不害怕之分。对孤独害怕，不过是因为对这世界的庞大森然有所畏惧，毕竟在与世界的比照之下，人太微薄渺小，一生又太短暂。这样的人喜欢用拼命付出感情或者拼命索要感情的方式来映照自己的存在，给自己以希望和慰藉。结果却往往只是更加深刻地证明了生命的本质孤独。有时候甚至尴尬到有话想要说的时候无人可说，有人可以说话的时候无话可说。”&lt;/p&gt;
&lt;/blockquote&gt;
&lt;hr /&gt;
&lt;blockquote&gt;
&lt;p&gt;我曾经在给朋友的信中写道：“人的一生，最难以保存的，是时间；最终能留下的，是记忆。而能够同时承载两者的，唯有文字。那些流逝的分分秒秒，如同被风扬起的沙粒，于漫长的时光中，在我们心头塑起一座记忆的沙堡，那是成长的里程碑，更是生命的珍贵财富。总有一天，你会再次翻阅自己过去亲手写下的每一段故事，每一次的开心与难过，每一次的忧伤与喜悦，你一定会被曾经的自己所感动。而这份感动，我想，是值得去怀念的。”&lt;/p&gt;
&lt;/blockquote&gt;
&lt;hr /&gt;
&lt;blockquote&gt;
&lt;p&gt;我说：在如今这个物欲横流，精神文明严重贬值的时代，信仰已经退化成一个讽刺性的词汇，但是我依然抱有信仰。我的信仰就是梦想。因为我坚信，人类因梦想而伟大，梦想因执著而伟大。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;hr /&gt;
&lt;blockquote&gt;
&lt;p&gt;所以，每每看见选秀节目上，歌手诉说自己曾经的贫困与磨难，却又标榜自己的音乐梦想时，我都会感到不可理喻。难道音乐真的已经病入膏肓，沦落到如此孱弱的地步了吗？一个拥有音乐梦想的人，应该同时拥有一个高贵的灵魂。即使贫穷，即使落魄，即使是一个衣不遮体的流浪者，他也可以对着高高在上的国王，竖起中指——除了梦想，没人可以让我低头臣服。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;hr /&gt;
&lt;blockquote&gt;
&lt;p&gt;我不怕一个人走到世界尽头，只怕陪伴我的人不能坚持到最后。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;hr /&gt;
&lt;blockquote&gt;
&lt;p&gt;我总是想，两个人在一起做同样的事，那种感觉是最好的。我们读同一本书，看同一部电影，听同一首歌，欣赏同一幕风景。于是，两个原本独立的人，因为有了共同的记忆，让彼此靠得更近。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h3 id="切梦刀"&gt;切梦刀&lt;/h3&gt;
&lt;blockquote&gt;
&lt;p&gt;花开自有花落，相聚还有别离。时间就像一只目不转睛的眼睛，它看清了虚假，看清了残缺，也看清了岁月的残酷。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h3 id="在知乎"&gt;在知乎&lt;/h3&gt;
&lt;blockquote&gt;
&lt;p&gt;“今天不想跑，所以才去跑，这才是长距离跑者的思维方式。”——村上春树&lt;/p&gt;
&lt;/blockquote&gt;
&lt;hr /&gt;
&lt;blockquote&gt;
&lt;p&gt;知友：看书要不要带目的性？&lt;/p&gt;
&lt;p&gt;程浩：要带问题，不要带目的。要有诉求，不要有功利。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;hr /&gt;
&lt;blockquote&gt;
&lt;p&gt;痛苦并非来自失去身体的自由，心灵的不屈与桀骜才是一切痛苦的本源。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;hr /&gt;
&lt;blockquote&gt;
&lt;p&gt;所谓的“看美剧，过六级”之类的帖子，都是写给那些好吃懒做，眼高手低，渴望提高又不想付出，睡前下决心，起床刷微博的迷茫无知男女的。他们想学习，却忍不了学习过程的枯燥无趣；他们有理想，却总觉得理想是个一锤子买卖，眼前的小事与理想无关；他们总想知道牛逼的学霸是怎么学习的，却没想过学霸的学习计划是按分钟算的。总而言之就是一句话：听的比想的多，想的比说的多，说的比做的多。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;hr /&gt;
&lt;blockquote&gt;
&lt;p&gt;这世上有两种人拥有与生俱来的正能量，一种人生活在阳光下，另一种人生活在黑暗里。前者就像海绵，已经吸收了足够多的温暖，只等待释放的一刻。后者渴望光明，所以无时无刻不在向光明靠近。&lt;/p&gt;
&lt;p&gt;正能量不是一种知识，所以我们永远无法学会。它是一种态度，一种习惯，这需要时间去培养。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;hr /&gt;
&lt;blockquote&gt;
&lt;p&gt;因为任何一条与社会主流价值观相背的路，都存在所谓的“鸡飞蛋打、一无所有、竹篮打水一场空”的风险。你会遇到前所未有的阻力，其中有来自家庭的，也有来自社会的，也有来自内心的。所以你不敢。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;hr /&gt;
&lt;blockquote&gt;
&lt;p&gt;知友：女人是男人的什么？&lt;/p&gt;
&lt;p&gt;程浩：女人是男人的脸。男人可以丢命，但是不能丢脸。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;hr /&gt;
&lt;blockquote&gt;
&lt;p&gt;何谓教育？传道，授业，解惑也。&lt;/p&gt;
&lt;p&gt;何谓传道？为人处世之原则；何谓授业？安身立命之本事；何谓解惑？脚踏实地之心态。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;hr /&gt;
&lt;blockquote&gt;
&lt;p&gt;知友：如何接受初恋女友结婚这一事实？&lt;/p&gt;
&lt;p&gt;程浩：为了不让现任女友变成下一个初恋女友，更爱她一点吧！&lt;/p&gt;
&lt;/blockquote&gt;
&lt;hr /&gt;
&lt;blockquote&gt;
&lt;p&gt;病人的恐惧源自死亡的威胁，与病房有什么关系？如果你能治好他，能挽救他的生命，那即使让他睡在公共厕所，他也会对你感恩戴德。如果你治不好他，他的生命即将终结，那即使住到马尔代夫的海滨别墅里，对他而言也不过是一副大一点的骨灰盒而已。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;hr /&gt;
&lt;blockquote&gt;
&lt;p&gt;此刻，我正在使用网络，但并不意味着失去网络我的生活就无法继续。也许，只有一个躺在床上的病人才能发现生活与人间的条条大路。那些走在都市的常人却只能迈向科技与智慧的数码地牢。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h3 id="我的笔记"&gt;我的笔记&lt;/h3&gt;
&lt;blockquote&gt;
&lt;p&gt;读书是一种习惯，也是一种技巧，更是一门技术。一个人读书，不是说他逐字逐句地念过一遍就能叫做“读书”，那顶多算是翻书。人家说，“想到”和“得到”之间，还有一个词叫“做到”。读书同样如此，“读过了”和“读懂了”之间，还有一段距离，而“读懂了”和“做到了”之间，也有一段距离。这本书就是告诉你一个如何才能“读懂”一本书的方法，至于能否“做到”，这需要看一个人的执行力，以及他的实践精神。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;2014.09.19&lt;/p&gt;
&lt;h4 id="footnotes"&gt;Footnotes:&lt;/h4&gt;
&lt;p&gt;&lt;sup&gt;&lt;a href="#fnref:1" name="fn:1"&gt;1&lt;/a&gt;&lt;/sup&gt; 这是程浩的文字集,二十年间，他没有下地走过路，疾病已成为生活的一部分，是真正向死而生的人。自称“职业病人”的他，坦然接受命运的不公，微笑面对人生的愁苦，他说道：“人消除痛苦的唯一办法就是找到自己的救赎之路。”而他那些充当救赎之路的文字，有着踏过痛苦后贴近大地的力量。他对生的渴望和对命运的包容，震撼了无数网友。这本书即是他的生命之作。——来自豆瓣。&lt;/p&gt;
</content>
  </entry>
</feed>

